/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LFWUtils_PolygonInterface extends utils.Interface {
  functions: {
    "getApeSwapFarmingInfo(uint256,address)": FunctionFragment;
    "getGNSFarmingPool(address)": FunctionFragment;
    "getGNSStakingPool(address,address)": FunctionFragment;
    "getQuickSwapDualLPFarmingInfo(address,address)": FunctionFragment;
    "getQuickSwapLPFarmingInfo(address,address)": FunctionFragment;
    "getQuickSwapStakingInfo(address,address)": FunctionFragment;
    "getSandboxStakingInfo(address,address)": FunctionFragment;
    "getSushiFarmingInfo(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getApeSwapFarmingInfo"
      | "getGNSFarmingPool"
      | "getGNSStakingPool"
      | "getQuickSwapDualLPFarmingInfo"
      | "getQuickSwapLPFarmingInfo"
      | "getQuickSwapStakingInfo"
      | "getSandboxStakingInfo"
      | "getSushiFarmingInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getApeSwapFarmingInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGNSFarmingPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGNSStakingPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuickSwapDualLPFarmingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuickSwapLPFarmingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuickSwapStakingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSandboxStakingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSushiFarmingInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getApeSwapFarmingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGNSFarmingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGNSStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuickSwapDualLPFarmingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuickSwapLPFarmingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuickSwapStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSandboxStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSushiFarmingInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LFWUtils_Polygon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LFWUtils_PolygonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getApeSwapFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getGNSFarmingPool(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getGNSStakingPool(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { stakingInfo: BigNumber[] }>;

    getQuickSwapDualLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getQuickSwapLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getQuickSwapStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { stakingInfo: BigNumber[] }>;

    getSandboxStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { stakingInfo: BigNumber[] }>;

    getSushiFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;
  };

  getApeSwapFarmingInfo(
    _pId: PromiseOrValue<BigNumberish>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[]] & {
      farmingInfo: BigNumber[];
      farmingData: string[];
    }
  >;

  getGNSFarmingPool(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[]] & {
      farmingInfo: BigNumber[];
      farmingData: string[];
    }
  >;

  getGNSStakingPool(
    _scAddress: PromiseOrValue<string>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getQuickSwapDualLPFarmingInfo(
    _scAddress: PromiseOrValue<string>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[]] & {
      farmingInfo: BigNumber[];
      farmingData: string[];
    }
  >;

  getQuickSwapLPFarmingInfo(
    _scAddress: PromiseOrValue<string>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[]] & {
      farmingInfo: BigNumber[];
      farmingData: string[];
    }
  >;

  getQuickSwapStakingInfo(
    _scAddress: PromiseOrValue<string>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSandboxStakingInfo(
    _scAddress: PromiseOrValue<string>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSushiFarmingInfo(
    _pId: PromiseOrValue<BigNumberish>,
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[]] & {
      farmingInfo: BigNumber[];
      farmingData: string[];
    }
  >;

  callStatic: {
    getApeSwapFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getGNSFarmingPool(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getGNSStakingPool(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getQuickSwapDualLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getQuickSwapLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;

    getQuickSwapStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSandboxStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSushiFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        farmingInfo: BigNumber[];
        farmingData: string[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    getApeSwapFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGNSFarmingPool(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGNSStakingPool(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuickSwapDualLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuickSwapLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuickSwapStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSandboxStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSushiFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getApeSwapFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGNSFarmingPool(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGNSStakingPool(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuickSwapDualLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuickSwapLPFarmingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuickSwapStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSandboxStakingInfo(
      _scAddress: PromiseOrValue<string>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSushiFarmingInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
